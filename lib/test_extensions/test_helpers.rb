require "test/unit"

module Mack
  
  module TestHelpers
    
    def temp_app_config(options = {})
      app_config.load_hash(options, String.randomize)
      yield
      app_config.revert
    end
    
    def remote_test
      if (app_config.run_remote_tests)
        yield
      end
    end

    # Performs a 'get' request for the specified uri.
    def get(uri, options = {})
      build_response(request.get(uri, options))
    end
    
    # Performs a 'put' request for the specified uri.
    def put(uri, options = {})
      build_response(request.put(uri, :input => options.to_params))
    end
    
    # Performs a 'post' request for the specified uri.
    def post(uri, options = {})
      build_response(request.post(uri, :input => options.to_params))
    end
    
    # Performs a 'delete' request for the specified uri.
    def delete(uri, options = {})
      build_response(request.delete(uri, options))
    end
    
    # Returns a Rack::MockRequest. If there isn't one, a new one is created.
    def request
      @request ||= Rack::MockRequest.new(Rack::Recursive.new(Mack::Runner.new))
    end
    
    # Returns the last Rack::MockResponse that got generated by a call.
    def response
      responses.last
    end
    
    # Returns all the Rack::MockResponse objects that get generated by a call.
    def responses
      @responses
    end
    
    # Returns a Mack::Session from the request.
    def session # :nodoc:
      Cachetastic::Caches::MackSessionCache.get(cookies[app_config.mack.session_id])
    end
    
    # Returns a Hash of cookies from the response.
    def cookies
      cooks = {}
      responses.each do |res|
        res.original_headers["Set-Cookie"].each do |ck|
          spt = ck.split("=")
          cooks[spt.first] = spt.last
        end
      end
      cooks
    end
    
    private
    def build_response(res)
      @responses = [res]
      until res.successful?
        res = request.get(res["Location"])
        @responses << res
      end
    end
    
  end # TestHelpers
  
end # Mack

Test::Unit::TestCase.send(:include, Mack::TestHelpers)